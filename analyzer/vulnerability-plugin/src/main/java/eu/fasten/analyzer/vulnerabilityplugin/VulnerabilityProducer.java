package eu.fasten.analyzer.vulnerabilityplugin;

import eu.fasten.analyzer.vulnerabilityplugin.utils.Dumper;
import eu.fasten.core.plugins.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;

public class VulnerabilityProducer implements KafkaProducer {

    private Logger logger = LoggerFactory.getLogger(getClass());
    final String produceTopic = "vulnerability";
    private static org.apache.kafka.clients.producer.KafkaProducer<Object, String>
            kafkaProducer;

    @Override
    public String producerTopic() {
        return this.produceTopic;
    }

    @Override
    public void setKafkaProducer(org.apache.kafka.clients.producer.KafkaProducer<Object, String> producer) {
        kafkaProducer = producer;
    }

    public void sendToKafka(final Integer number) {
        logger.debug("Writing the number " + number.toString() + " to Kafka");
        final ProducerRecord<Object, String> record = new ProducerRecord<Object, String>(
                this.producerTopic(),
                number.toString(),
                number.toString()
        );

        // Callback
        kafkaProducer.send(record, (recordMetadata, e) -> {
            if (recordMetadata != null) {
                logger.debug("Sent: {} to {}", number.hashCode(), this.producerTopic());
            } else {
                setPluginError(e);
                logger.error("Failed to write message to Kafka: " + e.getMessage(), e);
            }
        });

    }

    @Override
    public String name() {
        return null;
    }

    @Override
    public String description() {
        return null;
    }

    @Override
    public void start() {
        System.out.println("Populating the Kafka topic");
        // Step 1: Populate text file with numbers from 1 to 10 and write it to memory
        List<String> test = Arrays.asList("1", "2", "3", "4", "5", "6", "7", "8", "9", "10");
//        Dumper.write(test);

        System.out.println("Writing to Kafka");
        for(int i = 1; i <= 10; i++) {
            sendToKafka(i);
        }

        // Step 2: Start a new Thread that writes a number to the file every 10 seconds

        // Step 3: Start another thread that reads from the file and uses sendToKafka to send each new Number

        // Step 1: Initial dump of CVE information
//        Dumper.dump("vulnerabilities.txt");
        // Step 2: Start a new thread to retrieve information daily and update the local file
//        Collector collector = new Collector();
//        collector.run();
    }

    @Override
    public void stop() {

    }

    @Override
    public void setPluginError(Throwable throwable) {
        System.out.println("Could not send to Kafka topic");
    }

    @Override
    public String getPluginError() {
        return null;
    }

    @Override
    public void freeResource() {

    }
}
